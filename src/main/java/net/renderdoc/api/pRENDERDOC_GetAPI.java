// Generated by jextract

package net.renderdoc.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*pRENDERDOC_GetAPI)(enum RENDERDOC_Version version,void** outAPIPointers);
 * }
 */
public interface pRENDERDOC_GetAPI {

    int apply(int version, java.lang.foreign.MemorySegment outAPIPointers);
    static MemorySegment allocate(pRENDERDOC_GetAPI fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$16.const$0, fi, constants$7.const$3, scope);
    }
    static pRENDERDOC_GetAPI ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _version, java.lang.foreign.MemorySegment _outAPIPointers) -> {
            try {
                return (int)constants$7.const$5.invokeExact(symbol, _version, _outAPIPointers);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


