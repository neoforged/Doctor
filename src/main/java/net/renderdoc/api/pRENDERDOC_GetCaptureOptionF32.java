// Generated by jextract

package net.renderdoc.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * float (*pRENDERDOC_GetCaptureOptionF32)(enum RENDERDOC_CaptureOption opt);
 * }
 */
public interface pRENDERDOC_GetCaptureOptionF32 {

    float apply(int opt);
    static MemorySegment allocate(pRENDERDOC_GetCaptureOptionF32 fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1.const$5, fi, constants$1.const$4, scope);
    }
    static pRENDERDOC_GetCaptureOptionF32 ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _opt) -> {
            try {
                return (float)constants$2.const$0.invokeExact(symbol, _opt);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


