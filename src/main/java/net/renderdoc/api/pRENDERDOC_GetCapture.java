// Generated by jextract

package net.renderdoc.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * unsigned int (*pRENDERDOC_GetCapture)(unsigned int idx,char* filename,unsigned int* pathlength,unsigned long* timestamp);
 * }
 */
public interface pRENDERDOC_GetCapture {

    int apply(int idx, java.lang.foreign.MemorySegment filename, java.lang.foreign.MemorySegment pathlength, java.lang.foreign.MemorySegment timestamp);
    static MemorySegment allocate(pRENDERDOC_GetCapture fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$6.const$2, fi, constants$6.const$1, scope);
    }
    static pRENDERDOC_GetCapture ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _idx, java.lang.foreign.MemorySegment _filename, java.lang.foreign.MemorySegment _pathlength, java.lang.foreign.MemorySegment _timestamp) -> {
            try {
                return (int)constants$6.const$3.invokeExact(symbol, _idx, _filename, _pathlength, _timestamp);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


