// Generated by jextract

package net.renderdoc.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RENDERDOC_API_1_6_0 {
 *     pRENDERDOC_GetAPIVersion GetAPIVersion;
 *     pRENDERDOC_SetCaptureOptionU32 SetCaptureOptionU32;
 *     pRENDERDOC_SetCaptureOptionF32 SetCaptureOptionF32;
 *     pRENDERDOC_GetCaptureOptionU32 GetCaptureOptionU32;
 *     pRENDERDOC_GetCaptureOptionF32 GetCaptureOptionF32;
 *     pRENDERDOC_SetFocusToggleKeys SetFocusToggleKeys;
 *     pRENDERDOC_SetCaptureKeys SetCaptureKeys;
 *     pRENDERDOC_GetOverlayBits GetOverlayBits;
 *     pRENDERDOC_MaskOverlayBits MaskOverlayBits;
 *     union {
 *         pRENDERDOC_Shutdown Shutdown;
 *         pRENDERDOC_RemoveHooks RemoveHooks;
 *     };
 *     pRENDERDOC_UnloadCrashHandler UnloadCrashHandler;
 *     union {
 *         pRENDERDOC_SetLogFilePathTemplate SetLogFilePathTemplate;
 *         pRENDERDOC_SetCaptureFilePathTemplate SetCaptureFilePathTemplate;
 *     };
 *     union {
 *         pRENDERDOC_GetLogFilePathTemplate GetLogFilePathTemplate;
 *         pRENDERDOC_GetCaptureFilePathTemplate GetCaptureFilePathTemplate;
 *     };
 *     pRENDERDOC_GetNumCaptures GetNumCaptures;
 *     pRENDERDOC_GetCapture GetCapture;
 *     pRENDERDOC_TriggerCapture TriggerCapture;
 *     union {
 *         pRENDERDOC_IsRemoteAccessConnected IsRemoteAccessConnected;
 *         pRENDERDOC_IsTargetControlConnected IsTargetControlConnected;
 *     };
 *     pRENDERDOC_LaunchReplayUI LaunchReplayUI;
 *     pRENDERDOC_SetActiveWindow SetActiveWindow;
 *     pRENDERDOC_StartFrameCapture StartFrameCapture;
 *     pRENDERDOC_IsFrameCapturing IsFrameCapturing;
 *     pRENDERDOC_EndFrameCapture EndFrameCapture;
 *     pRENDERDOC_TriggerMultiFrameCapture TriggerMultiFrameCapture;
 *     pRENDERDOC_SetCaptureFileComments SetCaptureFileComments;
 *     pRENDERDOC_DiscardFrameCapture DiscardFrameCapture;
 *     pRENDERDOC_ShowReplayUI ShowReplayUI;
 *     pRENDERDOC_SetCaptureTitle SetCaptureTitle;
 * };
 * }
 */
public class RENDERDOC_API_1_6_0 {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$4;
    }
    public static VarHandle GetAPIVersion$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetAPIVersion GetAPIVersion;
     * }
     */
    public static MemorySegment GetAPIVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetAPIVersion GetAPIVersion;
     * }
     */
    public static void GetAPIVersion$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$5.set(seg, x);
    }
    public static MemorySegment GetAPIVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAPIVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetAPIVersion GetAPIVersion(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetAPIVersion.ofAddress(GetAPIVersion$get(segment), scope);
    }
    public static VarHandle SetCaptureOptionU32$VH() {
        return constants$11.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureOptionU32 SetCaptureOptionU32;
     * }
     */
    public static MemorySegment SetCaptureOptionU32$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureOptionU32 SetCaptureOptionU32;
     * }
     */
    public static void SetCaptureOptionU32$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$0.set(seg, x);
    }
    public static MemorySegment SetCaptureOptionU32$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureOptionU32$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureOptionU32 SetCaptureOptionU32(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureOptionU32.ofAddress(SetCaptureOptionU32$get(segment), scope);
    }
    public static VarHandle SetCaptureOptionF32$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureOptionF32 SetCaptureOptionF32;
     * }
     */
    public static MemorySegment SetCaptureOptionF32$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureOptionF32 SetCaptureOptionF32;
     * }
     */
    public static void SetCaptureOptionF32$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$1.set(seg, x);
    }
    public static MemorySegment SetCaptureOptionF32$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureOptionF32$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureOptionF32 SetCaptureOptionF32(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureOptionF32.ofAddress(SetCaptureOptionF32$get(segment), scope);
    }
    public static VarHandle GetCaptureOptionU32$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureOptionU32 GetCaptureOptionU32;
     * }
     */
    public static MemorySegment GetCaptureOptionU32$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureOptionU32 GetCaptureOptionU32;
     * }
     */
    public static void GetCaptureOptionU32$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$2.set(seg, x);
    }
    public static MemorySegment GetCaptureOptionU32$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCaptureOptionU32$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetCaptureOptionU32 GetCaptureOptionU32(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetCaptureOptionU32.ofAddress(GetCaptureOptionU32$get(segment), scope);
    }
    public static VarHandle GetCaptureOptionF32$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureOptionF32 GetCaptureOptionF32;
     * }
     */
    public static MemorySegment GetCaptureOptionF32$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureOptionF32 GetCaptureOptionF32;
     * }
     */
    public static void GetCaptureOptionF32$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$3.set(seg, x);
    }
    public static MemorySegment GetCaptureOptionF32$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCaptureOptionF32$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetCaptureOptionF32 GetCaptureOptionF32(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetCaptureOptionF32.ofAddress(GetCaptureOptionF32$get(segment), scope);
    }
    public static VarHandle SetFocusToggleKeys$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetFocusToggleKeys SetFocusToggleKeys;
     * }
     */
    public static MemorySegment SetFocusToggleKeys$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetFocusToggleKeys SetFocusToggleKeys;
     * }
     */
    public static void SetFocusToggleKeys$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$4.set(seg, x);
    }
    public static MemorySegment SetFocusToggleKeys$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFocusToggleKeys$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetFocusToggleKeys SetFocusToggleKeys(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetFocusToggleKeys.ofAddress(SetFocusToggleKeys$get(segment), scope);
    }
    public static VarHandle SetCaptureKeys$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureKeys SetCaptureKeys;
     * }
     */
    public static MemorySegment SetCaptureKeys$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureKeys SetCaptureKeys;
     * }
     */
    public static void SetCaptureKeys$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$5.set(seg, x);
    }
    public static MemorySegment SetCaptureKeys$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureKeys$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureKeys SetCaptureKeys(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureKeys.ofAddress(SetCaptureKeys$get(segment), scope);
    }
    public static VarHandle GetOverlayBits$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetOverlayBits GetOverlayBits;
     * }
     */
    public static MemorySegment GetOverlayBits$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetOverlayBits GetOverlayBits;
     * }
     */
    public static void GetOverlayBits$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$0.set(seg, x);
    }
    public static MemorySegment GetOverlayBits$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetOverlayBits$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetOverlayBits GetOverlayBits(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetOverlayBits.ofAddress(GetOverlayBits$get(segment), scope);
    }
    public static VarHandle MaskOverlayBits$VH() {
        return constants$12.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_MaskOverlayBits MaskOverlayBits;
     * }
     */
    public static MemorySegment MaskOverlayBits$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_MaskOverlayBits MaskOverlayBits;
     * }
     */
    public static void MaskOverlayBits$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$1.set(seg, x);
    }
    public static MemorySegment MaskOverlayBits$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaskOverlayBits$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_MaskOverlayBits MaskOverlayBits(MemorySegment segment, Arena scope) {
        return pRENDERDOC_MaskOverlayBits.ofAddress(MaskOverlayBits$get(segment), scope);
    }
    public static VarHandle Shutdown$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_Shutdown Shutdown;
     * }
     */
    public static MemorySegment Shutdown$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_Shutdown Shutdown;
     * }
     */
    public static void Shutdown$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$2.set(seg, x);
    }
    public static MemorySegment Shutdown$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Shutdown$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_Shutdown Shutdown(MemorySegment segment, Arena scope) {
        return pRENDERDOC_Shutdown.ofAddress(Shutdown$get(segment), scope);
    }
    public static VarHandle RemoveHooks$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_RemoveHooks RemoveHooks;
     * }
     */
    public static MemorySegment RemoveHooks$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_RemoveHooks RemoveHooks;
     * }
     */
    public static void RemoveHooks$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$3.set(seg, x);
    }
    public static MemorySegment RemoveHooks$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveHooks$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_RemoveHooks RemoveHooks(MemorySegment segment, Arena scope) {
        return pRENDERDOC_RemoveHooks.ofAddress(RemoveHooks$get(segment), scope);
    }
    public static VarHandle UnloadCrashHandler$VH() {
        return constants$12.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_UnloadCrashHandler UnloadCrashHandler;
     * }
     */
    public static MemorySegment UnloadCrashHandler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_UnloadCrashHandler UnloadCrashHandler;
     * }
     */
    public static void UnloadCrashHandler$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$4.set(seg, x);
    }
    public static MemorySegment UnloadCrashHandler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UnloadCrashHandler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_UnloadCrashHandler UnloadCrashHandler(MemorySegment segment, Arena scope) {
        return pRENDERDOC_UnloadCrashHandler.ofAddress(UnloadCrashHandler$get(segment), scope);
    }
    public static VarHandle SetLogFilePathTemplate$VH() {
        return constants$12.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetLogFilePathTemplate SetLogFilePathTemplate;
     * }
     */
    public static MemorySegment SetLogFilePathTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetLogFilePathTemplate SetLogFilePathTemplate;
     * }
     */
    public static void SetLogFilePathTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$5.set(seg, x);
    }
    public static MemorySegment SetLogFilePathTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLogFilePathTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetLogFilePathTemplate SetLogFilePathTemplate(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetLogFilePathTemplate.ofAddress(SetLogFilePathTemplate$get(segment), scope);
    }
    public static VarHandle SetCaptureFilePathTemplate$VH() {
        return constants$13.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureFilePathTemplate SetCaptureFilePathTemplate;
     * }
     */
    public static MemorySegment SetCaptureFilePathTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureFilePathTemplate SetCaptureFilePathTemplate;
     * }
     */
    public static void SetCaptureFilePathTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$0.set(seg, x);
    }
    public static MemorySegment SetCaptureFilePathTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureFilePathTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureFilePathTemplate SetCaptureFilePathTemplate(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureFilePathTemplate.ofAddress(SetCaptureFilePathTemplate$get(segment), scope);
    }
    public static VarHandle GetLogFilePathTemplate$VH() {
        return constants$13.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetLogFilePathTemplate GetLogFilePathTemplate;
     * }
     */
    public static MemorySegment GetLogFilePathTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetLogFilePathTemplate GetLogFilePathTemplate;
     * }
     */
    public static void GetLogFilePathTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$1.set(seg, x);
    }
    public static MemorySegment GetLogFilePathTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLogFilePathTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetLogFilePathTemplate GetLogFilePathTemplate(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetLogFilePathTemplate.ofAddress(GetLogFilePathTemplate$get(segment), scope);
    }
    public static VarHandle GetCaptureFilePathTemplate$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureFilePathTemplate GetCaptureFilePathTemplate;
     * }
     */
    public static MemorySegment GetCaptureFilePathTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetCaptureFilePathTemplate GetCaptureFilePathTemplate;
     * }
     */
    public static void GetCaptureFilePathTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$2.set(seg, x);
    }
    public static MemorySegment GetCaptureFilePathTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCaptureFilePathTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetCaptureFilePathTemplate GetCaptureFilePathTemplate(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetCaptureFilePathTemplate.ofAddress(GetCaptureFilePathTemplate$get(segment), scope);
    }
    public static VarHandle GetNumCaptures$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetNumCaptures GetNumCaptures;
     * }
     */
    public static MemorySegment GetNumCaptures$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetNumCaptures GetNumCaptures;
     * }
     */
    public static void GetNumCaptures$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$3.set(seg, x);
    }
    public static MemorySegment GetNumCaptures$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumCaptures$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetNumCaptures GetNumCaptures(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetNumCaptures.ofAddress(GetNumCaptures$get(segment), scope);
    }
    public static VarHandle GetCapture$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_GetCapture GetCapture;
     * }
     */
    public static MemorySegment GetCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_GetCapture GetCapture;
     * }
     */
    public static void GetCapture$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$4.set(seg, x);
    }
    public static MemorySegment GetCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_GetCapture GetCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_GetCapture.ofAddress(GetCapture$get(segment), scope);
    }
    public static VarHandle TriggerCapture$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_TriggerCapture TriggerCapture;
     * }
     */
    public static MemorySegment TriggerCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_TriggerCapture TriggerCapture;
     * }
     */
    public static void TriggerCapture$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$5.set(seg, x);
    }
    public static MemorySegment TriggerCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void TriggerCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_TriggerCapture TriggerCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_TriggerCapture.ofAddress(TriggerCapture$get(segment), scope);
    }
    public static VarHandle IsRemoteAccessConnected$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_IsRemoteAccessConnected IsRemoteAccessConnected;
     * }
     */
    public static MemorySegment IsRemoteAccessConnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_IsRemoteAccessConnected IsRemoteAccessConnected;
     * }
     */
    public static void IsRemoteAccessConnected$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$0.set(seg, x);
    }
    public static MemorySegment IsRemoteAccessConnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRemoteAccessConnected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_IsRemoteAccessConnected IsRemoteAccessConnected(MemorySegment segment, Arena scope) {
        return pRENDERDOC_IsRemoteAccessConnected.ofAddress(IsRemoteAccessConnected$get(segment), scope);
    }
    public static VarHandle IsTargetControlConnected$VH() {
        return constants$14.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_IsTargetControlConnected IsTargetControlConnected;
     * }
     */
    public static MemorySegment IsTargetControlConnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_IsTargetControlConnected IsTargetControlConnected;
     * }
     */
    public static void IsTargetControlConnected$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$1.set(seg, x);
    }
    public static MemorySegment IsTargetControlConnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void IsTargetControlConnected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_IsTargetControlConnected IsTargetControlConnected(MemorySegment segment, Arena scope) {
        return pRENDERDOC_IsTargetControlConnected.ofAddress(IsTargetControlConnected$get(segment), scope);
    }
    public static VarHandle LaunchReplayUI$VH() {
        return constants$14.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_LaunchReplayUI LaunchReplayUI;
     * }
     */
    public static MemorySegment LaunchReplayUI$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_LaunchReplayUI LaunchReplayUI;
     * }
     */
    public static void LaunchReplayUI$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$2.set(seg, x);
    }
    public static MemorySegment LaunchReplayUI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LaunchReplayUI$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_LaunchReplayUI LaunchReplayUI(MemorySegment segment, Arena scope) {
        return pRENDERDOC_LaunchReplayUI.ofAddress(LaunchReplayUI$get(segment), scope);
    }
    public static VarHandle SetActiveWindow$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetActiveWindow SetActiveWindow;
     * }
     */
    public static MemorySegment SetActiveWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetActiveWindow SetActiveWindow;
     * }
     */
    public static void SetActiveWindow$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$3.set(seg, x);
    }
    public static MemorySegment SetActiveWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetActiveWindow$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetActiveWindow SetActiveWindow(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetActiveWindow.ofAddress(SetActiveWindow$get(segment), scope);
    }
    public static VarHandle StartFrameCapture$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_StartFrameCapture StartFrameCapture;
     * }
     */
    public static MemorySegment StartFrameCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_StartFrameCapture StartFrameCapture;
     * }
     */
    public static void StartFrameCapture$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$4.set(seg, x);
    }
    public static MemorySegment StartFrameCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void StartFrameCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_StartFrameCapture StartFrameCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_StartFrameCapture.ofAddress(StartFrameCapture$get(segment), scope);
    }
    public static VarHandle IsFrameCapturing$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_IsFrameCapturing IsFrameCapturing;
     * }
     */
    public static MemorySegment IsFrameCapturing$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_IsFrameCapturing IsFrameCapturing;
     * }
     */
    public static void IsFrameCapturing$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$5.set(seg, x);
    }
    public static MemorySegment IsFrameCapturing$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void IsFrameCapturing$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_IsFrameCapturing IsFrameCapturing(MemorySegment segment, Arena scope) {
        return pRENDERDOC_IsFrameCapturing.ofAddress(IsFrameCapturing$get(segment), scope);
    }
    public static VarHandle EndFrameCapture$VH() {
        return constants$15.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_EndFrameCapture EndFrameCapture;
     * }
     */
    public static MemorySegment EndFrameCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_EndFrameCapture EndFrameCapture;
     * }
     */
    public static void EndFrameCapture$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$0.set(seg, x);
    }
    public static MemorySegment EndFrameCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EndFrameCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_EndFrameCapture EndFrameCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_EndFrameCapture.ofAddress(EndFrameCapture$get(segment), scope);
    }
    public static VarHandle TriggerMultiFrameCapture$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_TriggerMultiFrameCapture TriggerMultiFrameCapture;
     * }
     */
    public static MemorySegment TriggerMultiFrameCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_TriggerMultiFrameCapture TriggerMultiFrameCapture;
     * }
     */
    public static void TriggerMultiFrameCapture$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$1.set(seg, x);
    }
    public static MemorySegment TriggerMultiFrameCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TriggerMultiFrameCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_TriggerMultiFrameCapture TriggerMultiFrameCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_TriggerMultiFrameCapture.ofAddress(TriggerMultiFrameCapture$get(segment), scope);
    }
    public static VarHandle SetCaptureFileComments$VH() {
        return constants$15.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureFileComments SetCaptureFileComments;
     * }
     */
    public static MemorySegment SetCaptureFileComments$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureFileComments SetCaptureFileComments;
     * }
     */
    public static void SetCaptureFileComments$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$2.set(seg, x);
    }
    public static MemorySegment SetCaptureFileComments$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureFileComments$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureFileComments SetCaptureFileComments(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureFileComments.ofAddress(SetCaptureFileComments$get(segment), scope);
    }
    public static VarHandle DiscardFrameCapture$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_DiscardFrameCapture DiscardFrameCapture;
     * }
     */
    public static MemorySegment DiscardFrameCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_DiscardFrameCapture DiscardFrameCapture;
     * }
     */
    public static void DiscardFrameCapture$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$3.set(seg, x);
    }
    public static MemorySegment DiscardFrameCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DiscardFrameCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_DiscardFrameCapture DiscardFrameCapture(MemorySegment segment, Arena scope) {
        return pRENDERDOC_DiscardFrameCapture.ofAddress(DiscardFrameCapture$get(segment), scope);
    }
    public static VarHandle ShowReplayUI$VH() {
        return constants$15.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_ShowReplayUI ShowReplayUI;
     * }
     */
    public static MemorySegment ShowReplayUI$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_ShowReplayUI ShowReplayUI;
     * }
     */
    public static void ShowReplayUI$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$4.set(seg, x);
    }
    public static MemorySegment ShowReplayUI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ShowReplayUI$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_ShowReplayUI ShowReplayUI(MemorySegment segment, Arena scope) {
        return pRENDERDOC_ShowReplayUI.ofAddress(ShowReplayUI$get(segment), scope);
    }
    public static VarHandle SetCaptureTitle$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureTitle SetCaptureTitle;
     * }
     */
    public static MemorySegment SetCaptureTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pRENDERDOC_SetCaptureTitle SetCaptureTitle;
     * }
     */
    public static void SetCaptureTitle$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$5.set(seg, x);
    }
    public static MemorySegment SetCaptureTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCaptureTitle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pRENDERDOC_SetCaptureTitle SetCaptureTitle(MemorySegment segment, Arena scope) {
        return pRENDERDOC_SetCaptureTitle.ofAddress(SetCaptureTitle$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


