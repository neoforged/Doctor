// Generated by jextract

package net.renderdoc.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*pRENDERDOC_GetAPIVersion)(int* major,int* minor,int* patch);
 * }
 */
public interface pRENDERDOC_GetAPIVersion {

    void apply(java.lang.foreign.MemorySegment major, java.lang.foreign.MemorySegment minor, java.lang.foreign.MemorySegment patch);
    static MemorySegment allocate(pRENDERDOC_GetAPIVersion fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$8.const$1, fi, constants$8.const$0, scope);
    }
    static pRENDERDOC_GetAPIVersion ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _major, java.lang.foreign.MemorySegment _minor, java.lang.foreign.MemorySegment _patch) -> {
            try {
                constants$8.const$2.invokeExact(symbol, _major, _minor, _patch);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


